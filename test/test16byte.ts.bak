/* const { expect } = require('chai');
const { ethers } = require('hardhat');
import { MerkleTree } from 'merkletreejs';
import { batchAndStoreTransactions } from '../src/sequencer'


const MOCK_MERKLE_ROOT = "0x00000000000000000000000000000001";
const MOCK_LEAVES = [
    "0x00000000000000000000000000000002",
    "0x00000000000000000000000000000003",
    "0x00000000000000000000000000000004"
];
const MOCK_PROOFS = [
    "0x00000000000000000000000000000005",
    "0x00000000000000000000000000000006",
    "0x00000000000000000000000000000007"
];

describe("MerkleRootStorage contract", function() {
  let merkleRootStorage: any;

  beforeEach(async () => {
    const MerkleRootStorage = await ethers.getContractFactory("MerkleRootStorage16");
    merkleRootStorage = await MerkleRootStorage.deploy();
    await merkleRootStorage.deployed();
  });

  it("should store the merkle root correctly", async function() {
    await merkleRootStorage.storeMerkleRoot(MOCK_MERKLE_ROOT);

    expect(await merkleRootStorage.merkleRootCompact()).to.equal(MOCK_MERKLE_ROOT);
    expect(await merkleRootStorage.verified(MOCK_MERKLE_ROOT)).to.be.true;
  });

  it("should verify the merkle proof correctly", async function() {
    await merkleRootStorage.storeMerkleRoot(MOCK_MERKLE_ROOT);

    const results = await merkleRootStorage.verifyMerkleProof(MOCK_LEAVES, MOCK_PROOFS);

    expect(results).to.deep.equal([false, false, false]);
  });

  it("should not store a zero merkle root", async function() {
    await expect(merkleRootStorage.storeMerkleRoot(ethers.utils.hexZeroPad("0x",16))).to.be.revertedWith("Merkle root cannot be zero");
  });

  it("should not store a merkle root that has already been verified", async function() {
    await merkleRootStorage.storeMerkleRoot(MOCK_MERKLE_ROOT);

    await expect(merkleRootStorage.storeMerkleRoot(MOCK_MERKLE_ROOT)).to.be.revertedWith("Merkle root already verified");
  });

  it("should not verify a merkle proof with arrays of different lengths", async function() {
    await expect(merkleRootStorage.verifyMerkleProof(MOCK_LEAVES.slice(0, 2), MOCK_PROOFS)).to.be.revertedWith("Arrays must be of the same length");
  });
}); */


/* describe("MerkleRootStorage contract", function () {
  it("should batch and store transactions", async function () {
    const [owner, account1] = await ethers.getSigners();
    const MerkleRootStorage = await ethers.getContractFactory("MerkleRootStorage");
    const merkleRootStorage = await MerkleRootStorage.connect(owner).deploy();

    const transactions = [
      {
        target: account1.address,
        data: "0x",
        value: "0",
        gasLimit: 100000,
      },
      {
        target: account1.address,
        data: "0x",
        value: "0",
        gasLimit: 100000,
      },
    ];
    const privateKey = "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";
    await merkleRootStorage.connect(owner).storeMerkleRoot("0x00000000000000000000000000000001");
    console.log(await batchAndStoreTransactions(transactions, merkleRootStorage, privateKey));


    await expect(batchAndStoreTransactions(transactions, merkleRootStorage, privateKey)).to.not.be.reverted;

    const leaves = [];
    for (const tx of transactions) {
      const txData = merkleRootStorage.interface.encodeFunctionData("executeTransaction", [
        tx.target,
        tx.value,
        tx.data,
      ]);
      leaves.push(ethers.utils.keccak256(ethers.utils.defaultAbiCoder.encode(["bytes"], [txData])));
    }
    const tree = new MerkleTree(leaves);
    const root = "0x" + tree.getHexRoot();

    expect(await merkleRootStorage.merkleRootCompact()).to.equal("0x00000000000000000000000000000001");
    expect(await merkleRootStorage.verified(root)).to.be.true;
  });
});

 */
